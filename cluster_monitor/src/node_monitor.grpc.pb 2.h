// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node_monitor.proto
#ifndef GRPC_node_5fmonitor_2eproto__INCLUDED
#define GRPC_node_5fmonitor_2eproto__INCLUDED

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

#include <functional>

#include "node_monitor.pb.h"

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

class NodeMonitor final {
 public:
  static constexpr char const* service_full_name() { return "NodeMonitor"; }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context,
                                     const ::google::protobuf::Empty& request,
                                     ::NodeStatus* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::NodeStatus>>
    AsyncGetStatus(::grpc::ClientContext* context,
                   const ::google::protobuf::Empty& request,
                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::NodeStatus>>(
          AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::NodeStatus>>
    PrepareAsyncGetStatus(::grpc::ClientContext* context,
                          const ::google::protobuf::Empty& request,
                          ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::NodeStatus>>(
          PrepareAsyncGetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllNodeStatus(
        ::grpc::ClientContext* context,
        const ::google::protobuf::Empty& request,
        ::AllNodeStatus* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::AllNodeStatus>>
    AsyncGetAllNodeStatus(::grpc::ClientContext* context,
                          const ::google::protobuf::Empty& request,
                          ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::AllNodeStatus>>(
          AsyncGetAllNodeStatusRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::AllNodeStatus>>
    PrepareAsyncGetAllNodeStatus(::grpc::ClientContext* context,
                                 const ::google::protobuf::Empty& request,
                                 ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::AllNodeStatus>>(
          PrepareAsyncGetAllNodeStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetStatus(::grpc::ClientContext* context,
                             const ::google::protobuf::Empty* request,
                             ::NodeStatus* response,
                             std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context,
                             const ::grpc::ByteBuffer* request,
                             ::NodeStatus* response,
                             std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::NodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetStatus(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::NodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllNodeStatus(::grpc::ClientContext* context,
                                    const ::google::protobuf::Empty* request,
                                    ::AllNodeStatus* response,
                                    std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllNodeStatus(::grpc::ClientContext* context,
                                    const ::grpc::ByteBuffer* request,
                                    ::AllNodeStatus* response,
                                    std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllNodeStatus(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::AllNodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllNodeStatus(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::AllNodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() {
      return nullptr;
    }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<::NodeStatus>*
    AsyncGetStatusRaw(::grpc::ClientContext* context,
                      const ::google::protobuf::Empty& request,
                      ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::NodeStatus>*
    PrepareAsyncGetStatusRaw(::grpc::ClientContext* context,
                             const ::google::protobuf::Empty& request,
                             ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::AllNodeStatus>*
    AsyncGetAllNodeStatusRaw(::grpc::ClientContext* context,
                             const ::google::protobuf::Empty& request,
                             ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::AllNodeStatus>*
    PrepareAsyncGetAllNodeStatusRaw(::grpc::ClientContext* context,
                                    const ::google::protobuf::Empty& request,
                                    ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status GetStatus(::grpc::ClientContext* context,
                             const ::google::protobuf::Empty& request,
                             ::NodeStatus* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::NodeStatus>>
    AsyncGetStatus(::grpc::ClientContext* context,
                   const ::google::protobuf::Empty& request,
                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<::NodeStatus>>(
          AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::NodeStatus>>
    PrepareAsyncGetStatus(::grpc::ClientContext* context,
                          const ::google::protobuf::Empty& request,
                          ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<::NodeStatus>>(
          PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status GetAllNodeStatus(::grpc::ClientContext* context,
                                    const ::google::protobuf::Empty& request,
                                    ::AllNodeStatus* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::AllNodeStatus>>
    AsyncGetAllNodeStatus(::grpc::ClientContext* context,
                          const ::google::protobuf::Empty& request,
                          ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::AllNodeStatus>>(
          AsyncGetAllNodeStatusRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::AllNodeStatus>>
    PrepareAsyncGetAllNodeStatus(::grpc::ClientContext* context,
                                 const ::google::protobuf::Empty& request,
                                 ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::AllNodeStatus>>(
          PrepareAsyncGetAllNodeStatusRaw(context, request, cq));
    }
    class experimental_async final
        : public StubInterface::experimental_async_interface {
     public:
      void GetStatus(::grpc::ClientContext* context,
                     const ::google::protobuf::Empty* request,
                     ::NodeStatus* response,
                     std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context,
                     const ::grpc::ByteBuffer* request, ::NodeStatus* response,
                     std::function<void(::grpc::Status)>) override;
      void GetStatus(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::NodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetStatus(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::NodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAllNodeStatus(::grpc::ClientContext* context,
                            const ::google::protobuf::Empty* request,
                            ::AllNodeStatus* response,
                            std::function<void(::grpc::Status)>) override;
      void GetAllNodeStatus(::grpc::ClientContext* context,
                            const ::grpc::ByteBuffer* request,
                            ::AllNodeStatus* response,
                            std::function<void(::grpc::Status)>) override;
      void GetAllNodeStatus(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::AllNodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAllNodeStatus(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::AllNodeStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;

     private:
      friend class Stub;
      explicit experimental_async(Stub* stub) : stub_(stub) {}
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override {
      return &async_stub_;
    }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::NodeStatus>* AsyncGetStatusRaw(
        ::grpc::ClientContext* context,
        const ::google::protobuf::Empty& request,
        ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::NodeStatus>* PrepareAsyncGetStatusRaw(
        ::grpc::ClientContext* context,
        const ::google::protobuf::Empty& request,
        ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::AllNodeStatus>*
    AsyncGetAllNodeStatusRaw(::grpc::ClientContext* context,
                             const ::google::protobuf::Empty& request,
                             ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::AllNodeStatus>*
    PrepareAsyncGetAllNodeStatusRaw(::grpc::ClientContext* context,
                                    const ::google::protobuf::Empty& request,
                                    ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllNodeStatus_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context,
                                     const ::google::protobuf::Empty* request,
                                     ::NodeStatus* response);
    virtual ::grpc::Status GetAllNodeStatus(
        ::grpc::ServerContext* context,
        const ::google::protobuf::Empty* request, ::AllNodeStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_GetStatus() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/,
                             const ::google::protobuf::Empty* /*request*/,
                             ::NodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(
        ::grpc::ServerContext* context, ::google::protobuf::Empty* request,
        ::grpc::ServerAsyncResponseWriter<::NodeStatus>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_GetAllNodeStatus() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_GetAllNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::AllNodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNodeStatus(
        ::grpc::ServerContext* context, ::google::protobuf::Empty* request,
        ::grpc::ServerAsyncResponseWriter<::AllNodeStatus>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStatus<WithAsyncMethod_GetAllNodeStatus<Service>>
      AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(
          0, new ::grpc_impl::internal::CallbackUnaryHandler<
                 ::google::protobuf::Empty, ::NodeStatus>(
                 [this](::grpc::ServerContext* context,
                        const ::google::protobuf::Empty* request,
                        ::NodeStatus* response,
                        ::grpc::experimental::ServerCallbackRpcController*
                            controller) {
                   return this->GetStatus(context, request, response,
                                          controller);
                 }));
    }
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::experimental::MessageAllocator<::google::protobuf::Empty,
                                               ::NodeStatus>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler<
          ::google::protobuf::Empty, ::NodeStatus>*>(
          ::grpc::Service::experimental().GetHandler(0))
          ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/,
                             const ::google::protobuf::Empty* /*request*/,
                             ::NodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::NodeStatus* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithCallbackMethod_GetAllNodeStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(
          1, new ::grpc_impl::internal::CallbackUnaryHandler<
                 ::google::protobuf::Empty, ::AllNodeStatus>(
                 [this](::grpc::ServerContext* context,
                        const ::google::protobuf::Empty* request,
                        ::AllNodeStatus* response,
                        ::grpc::experimental::ServerCallbackRpcController*
                            controller) {
                   return this->GetAllNodeStatus(context, request, response,
                                                 controller);
                 }));
    }
    void SetMessageAllocatorFor_GetAllNodeStatus(
        ::grpc::experimental::MessageAllocator<::google::protobuf::Empty,
                                               ::AllNodeStatus>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler<
          ::google::protobuf::Empty, ::AllNodeStatus>*>(
          ::grpc::Service::experimental().GetHandler(1))
          ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::AllNodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::AllNodeStatus* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  typedef ExperimentalWithCallbackMethod_GetStatus<
      ExperimentalWithCallbackMethod_GetAllNodeStatus<Service>>
      ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_GetStatus() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/,
                             const ::google::protobuf::Empty* /*request*/,
                             ::NodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_GetAllNodeStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::AllNodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_GetStatus() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/,
                             const ::google::protobuf::Empty* /*request*/,
                             ::NodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_GetAllNodeStatus() { ::grpc::Service::MarkMethodRaw(1); }
    ~WithRawMethod_GetAllNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::AllNodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllNodeStatus(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithRawCallbackMethod_GetStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          0,
          new ::grpc_impl::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                          ::grpc::ByteBuffer>(
              [this](::grpc::ServerContext* context,
                     const ::grpc::ByteBuffer* request,
                     ::grpc::ByteBuffer* response,
                     ::grpc::experimental::ServerCallbackRpcController*
                         controller) {
                this->GetStatus(context, request, response, controller);
              }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/,
                             const ::google::protobuf::Empty* /*request*/,
                             ::NodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetStatus(
        ::grpc::ServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithRawCallbackMethod_GetAllNodeStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          1,
          new ::grpc_impl::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                          ::grpc::ByteBuffer>(
              [this](::grpc::ServerContext* context,
                     const ::grpc::ByteBuffer* request,
                     ::grpc::ByteBuffer* response,
                     ::grpc::experimental::ServerCallbackRpcController*
                         controller) {
                this->GetAllNodeStatus(context, request, response, controller);
              }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::AllNodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(
          0,
          new ::grpc::internal::StreamedUnaryHandler<::google::protobuf::Empty,
                                                     ::NodeStatus>(std::bind(
              &WithStreamedUnaryMethod_GetStatus<BaseClass>::StreamedGetStatus,
              this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/,
                             const ::google::protobuf::Empty* /*request*/,
                             ::NodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::google::protobuf::Empty, ::NodeStatus>*
            server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllNodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_GetAllNodeStatus() {
      ::grpc::Service::MarkMethodStreamed(
          1,
          new ::grpc::internal::StreamedUnaryHandler<::google::protobuf::Empty,
                                                     ::AllNodeStatus>(
              std::bind(&WithStreamedUnaryMethod_GetAllNodeStatus<
                            BaseClass>::StreamedGetAllNodeStatus,
                        this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllNodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllNodeStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::AllNodeStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllNodeStatus(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::google::protobuf::Empty, ::AllNodeStatus>*
            server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStatus<
      WithStreamedUnaryMethod_GetAllNodeStatus<Service>>
      StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStatus<
      WithStreamedUnaryMethod_GetAllNodeStatus<Service>>
      StreamedService;
};

class NodeActorMonitor final {
 public:
  static constexpr char const* service_full_name() {
    return "NodeActorMonitor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetNodeActorStatus(
        ::grpc::ClientContext* context,
        const ::google::protobuf::Empty& request, ::ActorStatus* response) = 0;
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::ActorStatus>>
    AsyncGetNodeActorStatus(::grpc::ClientContext* context,
                            const ::google::protobuf::Empty& request,
                            ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::ActorStatus>>(
          AsyncGetNodeActorStatusRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface<::ActorStatus>>
    PrepareAsyncGetNodeActorStatus(::grpc::ClientContext* context,
                                   const ::google::protobuf::Empty& request,
                                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::ActorStatus>>(
          PrepareAsyncGetNodeActorStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetNodeActorStatus(::grpc::ClientContext* context,
                                      const ::google::protobuf::Empty* request,
                                      ::ActorStatus* response,
                                      std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodeActorStatus(::grpc::ClientContext* context,
                                      const ::grpc::ByteBuffer* request,
                                      ::ActorStatus* response,
                                      std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodeActorStatus(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::ActorStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNodeActorStatus(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::ActorStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() {
      return nullptr;
    }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<::ActorStatus>*
    AsyncGetNodeActorStatusRaw(::grpc::ClientContext* context,
                               const ::google::protobuf::Empty& request,
                               ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::ActorStatus>*
    PrepareAsyncGetNodeActorStatusRaw(::grpc::ClientContext* context,
                                      const ::google::protobuf::Empty& request,
                                      ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status GetNodeActorStatus(::grpc::ClientContext* context,
                                      const ::google::protobuf::Empty& request,
                                      ::ActorStatus* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::ActorStatus>>
    AsyncGetNodeActorStatus(::grpc::ClientContext* context,
                            const ::google::protobuf::Empty& request,
                            ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<::ActorStatus>>(
          AsyncGetNodeActorStatusRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::ActorStatus>>
    PrepareAsyncGetNodeActorStatus(::grpc::ClientContext* context,
                                   const ::google::protobuf::Empty& request,
                                   ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncResponseReader<::ActorStatus>>(
          PrepareAsyncGetNodeActorStatusRaw(context, request, cq));
    }
    class experimental_async final
        : public StubInterface::experimental_async_interface {
     public:
      void GetNodeActorStatus(::grpc::ClientContext* context,
                              const ::google::protobuf::Empty* request,
                              ::ActorStatus* response,
                              std::function<void(::grpc::Status)>) override;
      void GetNodeActorStatus(::grpc::ClientContext* context,
                              const ::grpc::ByteBuffer* request,
                              ::ActorStatus* response,
                              std::function<void(::grpc::Status)>) override;
      void GetNodeActorStatus(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::ActorStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNodeActorStatus(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::ActorStatus* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;

     private:
      friend class Stub;
      explicit experimental_async(Stub* stub) : stub_(stub) {}
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override {
      return &async_stub_;
    }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::ActorStatus>*
    AsyncGetNodeActorStatusRaw(::grpc::ClientContext* context,
                               const ::google::protobuf::Empty& request,
                               ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::ActorStatus>*
    PrepareAsyncGetNodeActorStatusRaw(::grpc::ClientContext* context,
                                      const ::google::protobuf::Empty& request,
                                      ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodeActorStatus_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetNodeActorStatus(
        ::grpc::ServerContext* context,
        const ::google::protobuf::Empty* request, ::ActorStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodeActorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_GetNodeActorStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetNodeActorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::ActorStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeActorStatus(
        ::grpc::ServerContext* context, ::google::protobuf::Empty* request,
        ::grpc::ServerAsyncResponseWriter<::ActorStatus>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetNodeActorStatus<Service> AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNodeActorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithCallbackMethod_GetNodeActorStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(
          0, new ::grpc_impl::internal::CallbackUnaryHandler<
                 ::google::protobuf::Empty, ::ActorStatus>(
                 [this](::grpc::ServerContext* context,
                        const ::google::protobuf::Empty* request,
                        ::ActorStatus* response,
                        ::grpc::experimental::ServerCallbackRpcController*
                            controller) {
                   return this->GetNodeActorStatus(context, request, response,
                                                   controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNodeActorStatus(
        ::grpc::experimental::MessageAllocator<::google::protobuf::Empty,
                                               ::ActorStatus>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler<
          ::google::protobuf::Empty, ::ActorStatus>*>(
          ::grpc::Service::experimental().GetHandler(0))
          ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNodeActorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::ActorStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::ActorStatus* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  typedef ExperimentalWithCallbackMethod_GetNodeActorStatus<Service>
      ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetNodeActorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_GetNodeActorStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetNodeActorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::ActorStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodeActorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_GetNodeActorStatus() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_GetNodeActorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::ActorStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeActorStatus(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNodeActorStatus
      : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithRawCallbackMethod_GetNodeActorStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          0,
          new ::grpc_impl::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                          ::grpc::ByteBuffer>(
              [this](::grpc::ServerContext* context,
                     const ::grpc::ByteBuffer* request,
                     ::grpc::ByteBuffer* response,
                     ::grpc::experimental::ServerCallbackRpcController*
                         controller) {
                this->GetNodeActorStatus(context, request, response,
                                         controller);
              }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNodeActorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::ActorStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNodeActorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_GetNodeActorStatus() {
      ::grpc::Service::MarkMethodStreamed(
          0,
          new ::grpc::internal::StreamedUnaryHandler<::google::protobuf::Empty,
                                                     ::ActorStatus>(
              std::bind(&WithStreamedUnaryMethod_GetNodeActorStatus<
                            BaseClass>::StreamedGetNodeActorStatus,
                        this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNodeActorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodeActorStatus(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::ActorStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNodeActorStatus(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::google::protobuf::Empty, ::ActorStatus>*
            server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetNodeActorStatus<Service>
      StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetNodeActorStatus<Service> StreamedService;
};

#endif  // GRPC_node_5fmonitor_2eproto__INCLUDED
