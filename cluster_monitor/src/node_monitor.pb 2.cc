// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_monitor.proto

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>

#include "node_monitor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_5fmonitor_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_ActorInfo_node_5fmonitor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_5fmonitor_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_NodeStatus_node_5fmonitor_2eproto;
class NodeStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeStatus>
      _instance;
} _NodeStatus_default_instance_;
class AllNodeStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllNodeStatus>
      _instance;
} _AllNodeStatus_default_instance_;
class ActorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorInfo> _instance;
} _ActorInfo_default_instance_;
class ActorStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActorStatus>
      _instance;
} _ActorStatus_default_instance_;
static void InitDefaultsscc_info_ActorInfo_node_5fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActorInfo_default_instance_;
    new (ptr)::ActorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ActorInfo_node_5fmonitor_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, InitDefaultsscc_info_ActorInfo_node_5fmonitor_2eproto},
        {}};

static void InitDefaultsscc_info_ActorStatus_node_5fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActorStatus_default_instance_;
    new (ptr)::ActorStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActorStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ActorStatus_node_5fmonitor_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_ActorStatus_node_5fmonitor_2eproto},
        {
            &scc_info_ActorInfo_node_5fmonitor_2eproto.base,
        }};

static void InitDefaultsscc_info_AllNodeStatus_node_5fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AllNodeStatus_default_instance_;
    new (ptr)::AllNodeStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AllNodeStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_AllNodeStatus_node_5fmonitor_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_AllNodeStatus_node_5fmonitor_2eproto},
        {
            &scc_info_NodeStatus_node_5fmonitor_2eproto.base,
        }};

static void InitDefaultsscc_info_NodeStatus_node_5fmonitor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NodeStatus_default_instance_;
    new (ptr)::NodeStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NodeStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_NodeStatus_node_5fmonitor_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, InitDefaultsscc_info_NodeStatus_node_5fmonitor_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_node_5fmonitor_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const**
    file_level_enum_descriptors_node_5fmonitor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_node_5fmonitor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_node_5fmonitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NodeStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::NodeStatus, cpu_use_rate_),
        PROTOBUF_FIELD_OFFSET(::NodeStatus, mem_use_rate_),
        PROTOBUF_FIELD_OFFSET(::NodeStatus, max_memory_),
        PROTOBUF_FIELD_OFFSET(::NodeStatus, use_memory_),
        PROTOBUF_FIELD_OFFSET(::NodeStatus, ip_),
        PROTOBUF_FIELD_OFFSET(::NodeStatus, error_message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::AllNodeStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::AllNodeStatus, node_status_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ActorInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ActorInfo, name_),
        PROTOBUF_FIELD_OFFSET(::ActorInfo, description_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ActorStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ActorStatus, actor_infos_),
        PROTOBUF_FIELD_OFFSET(::ActorStatus, actor_worker_),
        PROTOBUF_FIELD_OFFSET(::ActorStatus, ip_),
        PROTOBUF_FIELD_OFFSET(::ActorStatus, error_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::NodeStatus)},
        {11, -1, sizeof(::AllNodeStatus)},
        {17, -1, sizeof(::ActorInfo)},
        {24, -1, sizeof(::ActorStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_NodeStatus_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_AllNodeStatus_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_ActorInfo_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_ActorStatus_default_instance_),
};

const char descriptor_table_protodef_node_5fmonitor_2eproto
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\022node_monitor.proto\032\033google/protobuf/em"
        "pty.proto\"\203\001\n\nNodeStatus\022\024\n\014cpu_use_rate"
        "\030\001 \001(\001\022\024\n\014mem_use_rate\030\002 "
        "\001(\001\022\022\n\nmax_memo"
        "ry\030\003 \001(\004\022\022\n\nuse_memory\030\004 "
        "\001(\004\022\n\n\002ip\030\005 \001(\t"
        "\022\025\n\rerror_message\030\006 \001(\t\"1\n\rAllNodeStatus"
        "\022 \n\013node_status\030\001 \003(\0132\013.NodeStatus\".\n\tAc"
        "torInfo\022\014\n\004name\030\001 "
        "\001(\t\022\023\n\013description\030\002 \001"
        "(\t\"g\n\013ActorStatus\022\037\n\013actor_infos\030\001 \003(\0132\n"
        ".ActorInfo\022\024\n\014actor_worker\030\002 "
        "\001(\005\022\n\n\002ip\030\003"
        " \001(\t\022\025\n\rerror_message\030\004 \001(\t2\177\n\013NodeMonit"
        "or\0222\n\tGetStatus\022\026.google.protobuf.Empty\032"
        "\013.NodeStatus\"\000\022<\n\020GetAllNodeStatus\022\026.goo"
        "gle.protobuf.Empty\032\016.AllNodeStatus\"\0002P\n\020"
        "NodeActorMonitor\022<\n\022GetNodeActorStatus\022\026"
        ".google.protobuf.Empty\032\014.ActorStatus\"\000b\006"
        "proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_node_5fmonitor_2eproto_deps[1] = {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_node_5fmonitor_2eproto_sccs[4] = {
        &scc_info_ActorInfo_node_5fmonitor_2eproto.base,
        &scc_info_ActorStatus_node_5fmonitor_2eproto.base,
        &scc_info_AllNodeStatus_node_5fmonitor_2eproto.base,
        &scc_info_NodeStatus_node_5fmonitor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_node_5fmonitor_2eproto_once;
static bool descriptor_table_node_5fmonitor_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_node_5fmonitor_2eproto = {
        &descriptor_table_node_5fmonitor_2eproto_initialized,
        descriptor_table_protodef_node_5fmonitor_2eproto,
        "node_monitor.proto",
        606,
        &descriptor_table_node_5fmonitor_2eproto_once,
        descriptor_table_node_5fmonitor_2eproto_sccs,
        descriptor_table_node_5fmonitor_2eproto_deps,
        4,
        1,
        schemas,
        file_default_instances,
        TableStruct_node_5fmonitor_2eproto::offsets,
        file_level_metadata_node_5fmonitor_2eproto,
        4,
        file_level_enum_descriptors_node_5fmonitor_2eproto,
        file_level_service_descriptors_node_5fmonitor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_5fmonitor_2eproto =
    (::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_node_5fmonitor_2eproto),
     true);

// ===================================================================

void NodeStatus::InitAsDefaultInstance() {}
class NodeStatus::_Internal {
 public:
};

NodeStatus::NodeStatus()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeStatus)
}
NodeStatus::NodeStatus(const NodeStatus& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.ip_);
  }
  error_message_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.error_message().empty()) {
    error_message_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.error_message_);
  }
  ::memcpy(&cpu_use_rate_, &from.cpu_use_rate_,
           static_cast<size_t>(reinterpret_cast<char*>(&use_memory_) -
                               reinterpret_cast<char*>(&cpu_use_rate_)) +
               sizeof(use_memory_));
  // @@protoc_insertion_point(copy_constructor:NodeStatus)
}

void NodeStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_NodeStatus_node_5fmonitor_2eproto.base);
  ip_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_use_rate_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&use_memory_) -
                               reinterpret_cast<char*>(&cpu_use_rate_)) +
               sizeof(use_memory_));
}

NodeStatus::~NodeStatus() {
  // @@protoc_insertion_point(destructor:NodeStatus)
  SharedDtor();
}

void NodeStatus::SharedDtor() {
  ip_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeStatus::SetCachedSize(int size) const { _cached_size_.Set(size); }
const NodeStatus& NodeStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_NodeStatus_node_5fmonitor_2eproto.base);
  return *internal_default_instance();
}

void NodeStatus::Clear() {
  // @@protoc_insertion_point(message_clear_start:NodeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ip_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_use_rate_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&use_memory_) -
                               reinterpret_cast<char*>(&cpu_use_rate_)) +
               sizeof(use_memory_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeStatus::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double cpu_use_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          cpu_use_rate_ =
              ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mem_use_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mem_use_rate_ =
              ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 use_memory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_ip(), ptr, ctx, "NodeStatus.ip");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_error_message(), ptr, ctx, "NodeStatus.error_message");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // double cpu_use_rate = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               double,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &cpu_use_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mem_use_rate = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               double,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
              input, &mem_use_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_memory = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               ::PROTOBUF_NAMESPACE_ID::uint64,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
              input, &max_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 use_memory = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               ::PROTOBUF_NAMESPACE_ID::uint64,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
              input, &use_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->ip().data(), static_cast<int>(this->ip().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "NodeStatus.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_error_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->error_message().data(),
                      static_cast<int>(this->error_message().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "NodeStatus.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // double cpu_use_rate = 1;
  if (!(this->cpu_use_rate() <= 0 && this->cpu_use_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
        1, this->cpu_use_rate(), output);
  }

  // double mem_use_rate = 2;
  if (!(this->mem_use_rate() <= 0 && this->mem_use_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
        2, this->mem_use_rate(), output);
  }

  // uint64 max_memory = 3;
  if (this->max_memory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
        3, this->max_memory(), output);
  }

  // uint64 use_memory = 4;
  if (this->use_memory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
        4, this->use_memory(), output);
  }

  // string ip = 5;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->ip().data(), static_cast<int>(this->ip().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "NodeStatus.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->ip(), output);
  }

  // string error_message = 6;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->error_message().data(),
        static_cast<int>(this->error_message().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "NodeStatus.error_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        6, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8*
NodeStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // double cpu_use_rate = 1;
  if (!(this->cpu_use_rate() <= 0 && this->cpu_use_rate() >= 0)) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
            1, this->cpu_use_rate(), target);
  }

  // double mem_use_rate = 2;
  if (!(this->mem_use_rate() <= 0 && this->mem_use_rate() >= 0)) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
            2, this->mem_use_rate(), target);
  }

  // uint64 max_memory = 3;
  if (this->max_memory() != 0) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            3, this->max_memory(), target);
  }

  // uint64 use_memory = 4;
  if (this->use_memory() != 0) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            4, this->use_memory(), target);
  }

  // string ip = 5;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->ip().data(), static_cast<int>(this->ip().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "NodeStatus.ip");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            5, this->ip(), target);
  }

  // string error_message = 6;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->error_message().data(),
        static_cast<int>(this->error_message().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "NodeStatus.error_message");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            6, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeStatus)
  return target;
}

size_t NodeStatus::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:NodeStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string ip = 5;
  if (this->ip().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->ip());
  }

  // string error_message = 6;
  if (this->error_message().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->error_message());
  }

  // double cpu_use_rate = 1;
  if (!(this->cpu_use_rate() <= 0 && this->cpu_use_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double mem_use_rate = 2;
  if (!(this->mem_use_rate() <= 0 && this->mem_use_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 max_memory = 3;
  if (this->max_memory() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->max_memory());
  }

  // uint64 use_memory = 4;
  if (this->use_memory() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->use_memory());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:NodeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeStatus>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:NodeStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:NodeStatus)
    MergeFrom(*source);
  }
}

void NodeStatus::MergeFrom(const NodeStatus& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:NodeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.ip_);
  }
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.error_message_);
  }
  if (!(from.cpu_use_rate() <= 0 && from.cpu_use_rate() >= 0)) {
    set_cpu_use_rate(from.cpu_use_rate());
  }
  if (!(from.mem_use_rate() <= 0 && from.mem_use_rate() >= 0)) {
    set_mem_use_rate(from.mem_use_rate());
  }
  if (from.max_memory() != 0) {
    set_max_memory(from.max_memory());
  }
  if (from.use_memory() != 0) {
    set_use_memory(from.use_memory());
  }
}

void NodeStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:NodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStatus::CopyFrom(const NodeStatus& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:NodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatus::IsInitialized() const { return true; }

void NodeStatus::InternalSwap(NodeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_,
           &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
           GetArenaNoVirtual());
  error_message_.Swap(
      &other->error_message_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(cpu_use_rate_, other->cpu_use_rate_);
  swap(mem_use_rate_, other->mem_use_rate_);
  swap(max_memory_, other->max_memory_);
  swap(use_memory_, other->use_memory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStatus::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AllNodeStatus::InitAsDefaultInstance() {}
class AllNodeStatus::_Internal {
 public:
};

AllNodeStatus::AllNodeStatus()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllNodeStatus)
}
AllNodeStatus::AllNodeStatus(const AllNodeStatus& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_status_(from.node_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AllNodeStatus)
}

void AllNodeStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AllNodeStatus_node_5fmonitor_2eproto.base);
}

AllNodeStatus::~AllNodeStatus() {
  // @@protoc_insertion_point(destructor:AllNodeStatus)
  SharedDtor();
}

void AllNodeStatus::SharedDtor() {}

void AllNodeStatus::SetCachedSize(int size) const { _cached_size_.Set(size); }
const AllNodeStatus& AllNodeStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AllNodeStatus_node_5fmonitor_2eproto.base);
  return *internal_default_instance();
}

void AllNodeStatus::Clear() {
  // @@protoc_insertion_point(message_clear_start:AllNodeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  node_status_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllNodeStatus::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NodeStatus node_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_node_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<
                       ::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllNodeStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllNodeStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // repeated .NodeStatus node_status = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
              input, add_node_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllNodeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllNodeStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllNodeStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllNodeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .NodeStatus node_status = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->node_status_size());
       i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->node_status(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllNodeStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8*
AllNodeStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllNodeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .NodeStatus node_status = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->node_status_size());
       i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->node_status(static_cast<int>(i)),
                                    target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllNodeStatus)
  return target;
}

size_t AllNodeStatus::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:AllNodeStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .NodeStatus node_status = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
              this->node_status(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllNodeStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:AllNodeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const AllNodeStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllNodeStatus>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:AllNodeStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:AllNodeStatus)
    MergeFrom(*source);
  }
}

void AllNodeStatus::MergeFrom(const AllNodeStatus& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:AllNodeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  node_status_.MergeFrom(from.node_status_);
}

void AllNodeStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:AllNodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllNodeStatus::CopyFrom(const AllNodeStatus& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:AllNodeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllNodeStatus::IsInitialized() const { return true; }

void AllNodeStatus::InternalSwap(AllNodeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&node_status_)->InternalSwap(CastToBase(&other->node_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllNodeStatus::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ActorInfo::InitAsDefaultInstance() {}
class ActorInfo::_Internal {
 public:
};

ActorInfo::ActorInfo()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActorInfo)
}
ActorInfo::ActorInfo(const ActorInfo& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
  description_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.description().empty()) {
    description_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:ActorInfo)
}

void ActorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ActorInfo_node_5fmonitor_2eproto.base);
  name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActorInfo::~ActorInfo() {
  // @@protoc_insertion_point(destructor:ActorInfo)
  SharedDtor();
}

void ActorInfo::SharedDtor() {
  name_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorInfo::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ActorInfo& ActorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ActorInfo_node_5fmonitor_2eproto.base);
  return *internal_default_instance();
}

void ActorInfo::Clear() {
  // @@protoc_insertion_point(message_clear_start:ActorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  name_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActorInfo::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_name(), ptr, ctx, "ActorInfo.name");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_description(), ptr, ctx, "ActorInfo.description");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActorInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActorInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // string name = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->name().data(),
                      static_cast<int>(this->name().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "ActorInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->description().data(),
                      static_cast<int>(this->description().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "ActorInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActorInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActorInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->description().data(),
        static_cast<int>(this->description().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorInfo.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActorInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8*
ActorInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorInfo.name");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            1, this->name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->description().data(),
        static_cast<int>(this->description().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorInfo.description");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActorInfo)
  return target;
}

size_t ActorInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ActorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->description());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ActorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorInfo>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ActorInfo)
    MergeFrom(*source);
  }
}

void ActorInfo::MergeFrom(const ActorInfo& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ActorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.name().size() > 0) {
    name_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
  if (from.description().size() > 0) {
    description_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.description_);
  }
}

void ActorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ActorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorInfo::CopyFrom(const ActorInfo& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ActorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorInfo::IsInitialized() const { return true; }

void ActorInfo::InternalSwap(ActorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  description_.Swap(
      &other->description_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorInfo::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ActorStatus::InitAsDefaultInstance() {}
class ActorStatus::_Internal {
 public:
};

ActorStatus::ActorStatus()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActorStatus)
}
ActorStatus::ActorStatus(const ActorStatus& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      actor_infos_(from.actor_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.ip_);
  }
  error_message_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.error_message().empty()) {
    error_message_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.error_message_);
  }
  actor_worker_ = from.actor_worker_;
  // @@protoc_insertion_point(copy_constructor:ActorStatus)
}

void ActorStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ActorStatus_node_5fmonitor_2eproto.base);
  ip_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_worker_ = 0;
}

ActorStatus::~ActorStatus() {
  // @@protoc_insertion_point(destructor:ActorStatus)
  SharedDtor();
}

void ActorStatus::SharedDtor() {
  ip_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActorStatus::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ActorStatus& ActorStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ActorStatus_node_5fmonitor_2eproto.base);
  return *internal_default_instance();
}

void ActorStatus::Clear() {
  // @@protoc_insertion_point(message_clear_start:ActorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  actor_infos_.Clear();
  ip_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_worker_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActorStatus::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ActorInfo actor_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_actor_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<
                       ::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else
          goto handle_unusual;
        continue;
      // int32 actor_worker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actor_worker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_ip(), ptr, ctx, "ActorStatus.ip");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_error_message(), ptr, ctx, "ActorStatus.error_message");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActorStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActorStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // repeated .ActorInfo actor_infos = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
              input, add_actor_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actor_worker = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               ::PROTOBUF_NAMESPACE_ID::int32,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
              input, &actor_worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->ip().data(), static_cast<int>(this->ip().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "ActorStatus.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_error_message()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->error_message().data(),
                      static_cast<int>(this->error_message().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "ActorStatus.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActorStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActorStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ActorInfo actor_infos = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->actor_infos_size());
       i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->actor_infos(static_cast<int>(i)), output);
  }

  // int32 actor_worker = 2;
  if (this->actor_worker() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
        2, this->actor_worker(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->ip().data(), static_cast<int>(this->ip().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorStatus.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->ip(), output);
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->error_message().data(),
        static_cast<int>(this->error_message().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorStatus.error_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->error_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActorStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8*
ActorStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .ActorInfo actor_infos = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->actor_infos_size());
       i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->actor_infos(static_cast<int>(i)),
                                    target);
  }

  // int32 actor_worker = 2;
  if (this->actor_worker() != 0) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            2, this->actor_worker(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->ip().data(), static_cast<int>(this->ip().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorStatus.ip");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            3, this->ip(), target);
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->error_message().data(),
        static_cast<int>(this->error_message().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ActorStatus.error_message");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            4, this->error_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActorStatus)
  return target;
}

size_t ActorStatus::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ActorStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .ActorInfo actor_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->actor_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
              this->actor_infos(static_cast<int>(i)));
    }
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->ip());
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->error_message());
  }

  // int32 actor_worker = 2;
  if (this->actor_worker() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->actor_worker());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActorStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ActorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActorStatus>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActorStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ActorStatus)
    MergeFrom(*source);
  }
}

void ActorStatus::MergeFrom(const ActorStatus& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ActorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  actor_infos_.MergeFrom(from.actor_infos_);
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.ip_);
  }
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.error_message_);
  }
  if (from.actor_worker() != 0) {
    set_actor_worker(from.actor_worker());
  }
}

void ActorStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ActorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorStatus::CopyFrom(const ActorStatus& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ActorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorStatus::IsInitialized() const { return true; }

void ActorStatus::InternalSwap(ActorStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&actor_infos_)->InternalSwap(CastToBase(&other->actor_infos_));
  ip_.Swap(&other->ip_,
           &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
           GetArenaNoVirtual());
  error_message_.Swap(
      &other->error_message_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(actor_worker_, other->actor_worker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActorStatus::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::NodeStatus* Arena::CreateMaybeMessage<::NodeStatus>(
    Arena* arena) {
  return Arena::CreateInternal<::NodeStatus>(arena);
}
template <>
PROTOBUF_NOINLINE ::AllNodeStatus* Arena::CreateMaybeMessage<::AllNodeStatus>(
    Arena* arena) {
  return Arena::CreateInternal<::AllNodeStatus>(arena);
}
template <>
PROTOBUF_NOINLINE ::ActorInfo* Arena::CreateMaybeMessage<::ActorInfo>(
    Arena* arena) {
  return Arena::CreateInternal<::ActorInfo>(arena);
}
template <>
PROTOBUF_NOINLINE ::ActorStatus* Arena::CreateMaybeMessage<::ActorStatus>(
    Arena* arena) {
  return Arena::CreateInternal<::ActorStatus>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
