// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_keeper.proto

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>

#include "node_keeper.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_5fkeeper_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_Member_node_5fkeeper_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
class MemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Member> _instance;
} _Member_default_instance_;
class GetMembersReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMembersReply>
      _instance;
} _GetMembersReply_default_instance_;
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest>
      _instance;
} _SubscribeRequest_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class MemberEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberEvent>
      _instance;
} _MemberEvent_default_instance_;
static void InitDefaultsscc_info_Event_node_5fkeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Event_default_instance_;
    new (ptr)::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_Event_node_5fkeeper_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_Event_node_5fkeeper_2eproto},
        {
            &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
        }};

static void InitDefaultsscc_info_GetMembersReply_node_5fkeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetMembersReply_default_instance_;
    new (ptr)::GetMembersReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetMembersReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_GetMembersReply_node_5fkeeper_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_GetMembersReply_node_5fkeeper_2eproto},
        {
            &scc_info_Member_node_5fkeeper_2eproto.base,
        }};

static void InitDefaultsscc_info_Member_node_5fkeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Member_default_instance_;
    new (ptr)::Member();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Member::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Member_node_5fkeeper_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, InitDefaultsscc_info_Member_node_5fkeeper_2eproto},
        {}};

static void InitDefaultsscc_info_MemberEvent_node_5fkeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MemberEvent_default_instance_;
    new (ptr)::MemberEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MemberEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_MemberEvent_node_5fkeeper_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_MemberEvent_node_5fkeeper_2eproto},
        {
            &scc_info_Member_node_5fkeeper_2eproto.base,
        }};

static void InitDefaultsscc_info_SubscribeRequest_node_5fkeeper_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubscribeRequest_default_instance_;
    new (ptr)::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_SubscribeRequest_node_5fkeeper_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, InitDefaultsscc_info_SubscribeRequest_node_5fkeeper_2eproto},
        {
            &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,
        }};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_node_5fkeeper_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
    file_level_enum_descriptors_node_5fkeeper_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_node_5fkeeper_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_node_5fkeeper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Member, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::Member, name_),
        PROTOBUF_FIELD_OFFSET(::Member, host_),
        PROTOBUF_FIELD_OFFSET(::Member, port_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::GetMembersReply, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::GetMembersReply, members_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SubscribeRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::SubscribeRequest, mask_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Event, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::Event, type_),
        PROTOBUF_FIELD_OFFSET(::Event, data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MemberEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::MemberEvent, member_),
        PROTOBUF_FIELD_OFFSET(::MemberEvent, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::Member)},
        {8, -1, sizeof(::GetMembersReply)},
        {14, -1, sizeof(::SubscribeRequest)},
        {20, -1, sizeof(::Event)},
        {27, -1, sizeof(::MemberEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_Member_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_GetMembersReply_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_SubscribeRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_Event_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::_MemberEvent_default_instance_),
};

const char
    descriptor_table_protodef_node_5fkeeper_2eproto[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) =
        "\n\021node_keeper.proto\032\033google/protobuf/emp"
        "ty.proto\032 google/protobuf/field_mask.pro"
        "to\032\031google/protobuf/any.proto\"2\n\006Member\022"
        "\014\n\004name\030\001 \001(\t\022\014\n\004host\030\002 "
        "\001(\t\022\014\n\004port\030\003 \001("
        "\r\"+\n\017GetMembersReply\022\030\n\007members\030\001 "
        "\003(\0132\007."
        "Member\"<\n\020SubscribeRequest\022(\n\004mask\030\001 \001(\013"
        "2\032.google.protobuf.FieldMask\"o\n\005Event\022\031\n"
        "\004type\030\001 \001(\0162\013.Event.Type\022\"\n\004data\030\002 "
        "\001(\0132\024"
        ".google.protobuf.Any\"\'\n\004Type\022\013\n\007UNKNOWN\020"
        "\000\022\022\n\016MEMBER_"
        "CHANGED\020\001\"t\n\013MemberEvent\022\027\n\006"
        "member\030\001 \001(\0132\007.Member\022#\n\006status\030\002 "
        "\001(\0162\023."
        "MemberEvent.Status\"\'\n\006Status\022\013\n\007UNKNOWN\020"
        "\000\022\006\n\002UP\020\001\022\010\n\004DOWN\020\0022r\n\nNodeKeeper"
        "\0228\n\nGet"
        "Members\022\026.google.protobuf.Empty\032\020.GetMem"
        "bersReply\"\000\022*\n\tSubscribe\022\021.SubscribeRequ"
        "est\032\006.Event\"\0000\001b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_node_5fkeeper_2eproto_deps[3] = {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_node_5fkeeper_2eproto_sccs[5] = {
        &scc_info_Event_node_5fkeeper_2eproto.base,
        &scc_info_GetMembersReply_node_5fkeeper_2eproto.base,
        &scc_info_Member_node_5fkeeper_2eproto.base,
        &scc_info_MemberEvent_node_5fkeeper_2eproto.base,
        &scc_info_SubscribeRequest_node_5fkeeper_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_node_5fkeeper_2eproto_once;
static bool descriptor_table_node_5fkeeper_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_node_5fkeeper_2eproto = {
        &descriptor_table_node_5fkeeper_2eproto_initialized,
        descriptor_table_protodef_node_5fkeeper_2eproto,
        "node_keeper.proto",
        623,
        &descriptor_table_node_5fkeeper_2eproto_once,
        descriptor_table_node_5fkeeper_2eproto_sccs,
        descriptor_table_node_5fkeeper_2eproto_deps,
        5,
        3,
        schemas,
        file_default_instances,
        TableStruct_node_5fkeeper_2eproto::offsets,
        file_level_metadata_node_5fkeeper_2eproto,
        5,
        file_level_enum_descriptors_node_5fkeeper_2eproto,
        file_level_service_descriptors_node_5fkeeper_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_5fkeeper_2eproto =
    (::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_node_5fkeeper_2eproto),
     true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Event_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_5fkeeper_2eproto);
  return file_level_enum_descriptors_node_5fkeeper_2eproto[0];
}
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Event_Type Event::UNKNOWN;
constexpr Event_Type Event::MEMBER_CHANGED;
constexpr Event_Type Event::Type_MIN;
constexpr Event_Type Event::Type_MAX;
constexpr int Event::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberEvent_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_node_5fkeeper_2eproto);
  return file_level_enum_descriptors_node_5fkeeper_2eproto[1];
}
bool MemberEvent_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MemberEvent_Status MemberEvent::UNKNOWN;
constexpr MemberEvent_Status MemberEvent::UP;
constexpr MemberEvent_Status MemberEvent::DOWN;
constexpr MemberEvent_Status MemberEvent::Status_MIN;
constexpr MemberEvent_Status MemberEvent::Status_MAX;
constexpr int MemberEvent::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Member::InitAsDefaultInstance() {}
class Member::_Internal {
 public:
};

Member::Member()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Member)
}
Member::Member(const Member& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
  host_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.host().empty()) {
    host_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.host_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:Member)
}

void Member::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Member_node_5fkeeper_2eproto.base);
  name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:Member)
  SharedDtor();
}

void Member::SharedDtor() {
  name_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Member& Member::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Member_node_5fkeeper_2eproto.base);
  return *internal_default_instance();
}

void Member::Clear() {
  // @@protoc_insertion_point(message_clear_start:Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  name_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Member::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_name(), ptr, ctx, "Member.name");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(
              mutable_host(), ptr, ctx, "Member.host");
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Member::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Member)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // string name = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->name().data(),
                      static_cast<int>(this->name().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "Member.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
              input, this->mutable_host()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                  VerifyUtf8String(
                      this->host().data(),
                      static_cast<int>(this->host().length()),
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
                      "Member.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               ::PROTOBUF_NAMESPACE_ID::uint32,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
              input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Member::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Member.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->name(), output);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->host().data(), static_cast<int>(this->host().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Member.host");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->host(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
        3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Member)
}

::PROTOBUF_NAMESPACE_ID::uint8* Member::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Member.name");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            1, this->name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->host().data(), static_cast<int>(this->host().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "Member.host");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            2, this->host(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Member)
  return target;
}

size_t Member::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->host());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Member>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.name().size() > 0) {
    name_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
  if (from.host().size() > 0) {
    host_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.host_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const { return true; }

void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  host_.Swap(&other->host_,
             &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GetMembersReply::InitAsDefaultInstance() {}
class GetMembersReply::_Internal {
 public:
};

GetMembersReply::GetMembersReply()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetMembersReply)
}
GetMembersReply::GetMembersReply(const GetMembersReply& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetMembersReply)
}

void GetMembersReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GetMembersReply_node_5fkeeper_2eproto.base);
}

GetMembersReply::~GetMembersReply() {
  // @@protoc_insertion_point(destructor:GetMembersReply)
  SharedDtor();
}

void GetMembersReply::SharedDtor() {}

void GetMembersReply::SetCachedSize(int size) const { _cached_size_.Set(size); }
const GetMembersReply& GetMembersReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GetMembersReply_node_5fkeeper_2eproto.base);
  return *internal_default_instance();
}

void GetMembersReply::Clear() {
  // @@protoc_insertion_point(message_clear_start:GetMembersReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMembersReply::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Member members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<
                       ::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMembersReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetMembersReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // repeated .Member members = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
              input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetMembersReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetMembersReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMembersReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetMembersReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Member members = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->members_size());
       i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->members(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetMembersReply)
}

::PROTOBUF_NAMESPACE_ID::uint8*
GetMembersReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetMembersReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Member members = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->members_size());
       i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->members(static_cast<int>(i)),
                                    target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetMembersReply)
  return target;
}

size_t GetMembersReply::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:GetMembersReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .Member members = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
              this->members(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMembersReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:GetMembersReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMembersReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMembersReply>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetMembersReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:GetMembersReply)
    MergeFrom(*source);
  }
}

void GetMembersReply::MergeFrom(const GetMembersReply& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:GetMembersReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  members_.MergeFrom(from.members_);
}

void GetMembersReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:GetMembersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersReply::CopyFrom(const GetMembersReply& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:GetMembersReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersReply::IsInitialized() const { return true; }

void GetMembersReply::InternalSwap(GetMembersReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMembersReply::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::_SubscribeRequest_default_instance_._instance.get_mutable()->mask_ =
      const_cast<PROTOBUF_NAMESPACE_ID::FieldMask*>(
          PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FieldMask& mask(
      const SubscribeRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::FieldMask& SubscribeRequest::_Internal::mask(
    const SubscribeRequest* msg) {
  return *msg->mask_;
}
void SubscribeRequest::clear_mask() {
  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
SubscribeRequest::SubscribeRequest()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mask()) {
    mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SubscribeRequest_node_5fkeeper_2eproto.base);
  mask_ = nullptr;
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete mask_;
}

void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SubscribeRequest_node_5fkeeper_2eproto.base);
  return *internal_default_instance();
}

void SubscribeRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeRequest::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubscribeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // .google.protobuf.FieldMask mask = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
              input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubscribeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->has_mask()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubscribeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8*
SubscribeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->has_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(1, _Internal::mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:SubscribeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // .google.protobuf.FieldMask mask = 1;
  if (this->has_mask()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*mask_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_mask()) {
    mutable_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from.mask());
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const { return true; }

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mask_, other->mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void Event::InitAsDefaultInstance() {
  ::_Event_default_instance_._instance.get_mutable()->data_ =
      const_cast<PROTOBUF_NAMESPACE_ID::Any*>(
          PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Event::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const Event* msg);
};

const PROTOBUF_NAMESPACE_ID::Any& Event::_Internal::data(const Event* msg) {
  return *msg->data_;
}
void Event::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
Event::Event()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Event)
}
Event::Event(const Event& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Event_node_5fkeeper_2eproto.base);
  ::memset(&data_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&data_)) +
               sizeof(type_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void Event::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Event_node_5fkeeper_2eproto.base);
  return *internal_default_instance();
}

void Event::Clear() {
  // @@protoc_insertion_point(message_clear_start:Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Event::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Event.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::Event_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Event::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Event)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // .Event.Type type = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               int,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          set_type(static_cast<::Event_Type>(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
              input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Event::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .Event.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
        1, this->type(), output);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Event)
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .Event.Type type = 1;
  if (this->type() != 0) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            1, this->type(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(2, _Internal::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Event)
  return target;
}

size_t Event::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size +=
        1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*data_);
  }

  // .Event.Type type = 1;
  if (this->type() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_data()) {
    mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.data());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const { return true; }

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void MemberEvent::InitAsDefaultInstance() {
  ::_MemberEvent_default_instance_._instance.get_mutable()->member_ =
      const_cast<::Member*>(::Member::internal_default_instance());
}
class MemberEvent::_Internal {
 public:
  static const ::Member& member(const MemberEvent* msg);
};

const ::Member& MemberEvent::_Internal::member(const MemberEvent* msg) {
  return *msg->member_;
}
MemberEvent::MemberEvent()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemberEvent)
}
MemberEvent::MemberEvent(const MemberEvent& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_member()) {
    member_ = new ::Member(*from.member_);
  } else {
    member_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:MemberEvent)
}

void MemberEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_MemberEvent_node_5fkeeper_2eproto.base);
  ::memset(&member_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&status_) -
                               reinterpret_cast<char*>(&member_)) +
               sizeof(status_));
}

MemberEvent::~MemberEvent() {
  // @@protoc_insertion_point(destructor:MemberEvent)
  SharedDtor();
}

void MemberEvent::SharedDtor() {
  if (this != internal_default_instance()) delete member_;
}

void MemberEvent::SetCachedSize(int size) const { _cached_size_.Set(size); }
const MemberEvent& MemberEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MemberEvent_node_5fkeeper_2eproto.base);
  return *internal_default_instance();
}

void MemberEvent::Clear() {
  // @@protoc_insertion_point(message_clear_start:MemberEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemberEvent::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Member member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_member(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MemberEvent.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::MemberEvent_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemberEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemberEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
      // .Member member = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
              input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MemberEvent.Status status = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
               int,
               ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          set_status(static_cast<::MemberEvent_Status>(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemberEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemberEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemberEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemberEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .Member member = 1;
  if (this->has_member()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::member(this), output);
  }

  // .MemberEvent.Status status = 2;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
        2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemberEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8*
MemberEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemberEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .Member member = 1;
  if (this->has_member()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(1, _Internal::member(this), target);
  }

  // .MemberEvent.Status status = 2;
  if (this->status() != 0) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemberEvent)
  return target;
}

size_t MemberEvent::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:MemberEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // .Member member = 1;
  if (this->has_member()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *member_);
  }

  // .MemberEvent.Status status = 2;
  if (this->status() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:MemberEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberEvent>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:MemberEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:MemberEvent)
    MergeFrom(*source);
  }
}

void MemberEvent::MergeFrom(const MemberEvent& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:MemberEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_member()) {
    mutable_member()->::Member::MergeFrom(from.member());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void MemberEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:MemberEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberEvent::CopyFrom(const MemberEvent& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:MemberEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberEvent::IsInitialized() const { return true; }

void MemberEvent::InternalSwap(MemberEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(member_, other->member_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberEvent::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::Member* Arena::CreateMaybeMessage<::Member>(Arena* arena) {
  return Arena::CreateInternal<::Member>(arena);
}
template <>
PROTOBUF_NOINLINE ::GetMembersReply*
Arena::CreateMaybeMessage<::GetMembersReply>(Arena* arena) {
  return Arena::CreateInternal<::GetMembersReply>(arena);
}
template <>
PROTOBUF_NOINLINE ::SubscribeRequest*
Arena::CreateMaybeMessage<::SubscribeRequest>(Arena* arena) {
  return Arena::CreateInternal<::SubscribeRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::Event* Arena::CreateMaybeMessage<::Event>(Arena* arena) {
  return Arena::CreateInternal<::Event>(arena);
}
template <>
PROTOBUF_NOINLINE ::MemberEvent* Arena::CreateMaybeMessage<::MemberEvent>(
    Arena* arena) {
  return Arena::CreateInternal<::MemberEvent>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
