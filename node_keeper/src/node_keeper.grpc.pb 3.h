// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node_keeper.proto
#ifndef GRPC_node_5fkeeper_2eproto__INCLUDED
#define GRPC_node_5fkeeper_2eproto__INCLUDED

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

#include <functional>

#include "node_keeper.pb.h"

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

class NodeKeeper final {
 public:
  static constexpr char const* service_full_name() { return "NodeKeeper"; }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetMembers(::grpc::ClientContext* context,
                                      const ::google::protobuf::Empty& request,
                                      ::GetMembersReply* response) = 0;
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::GetMembersReply>>
    AsyncGetMembers(::grpc::ClientContext* context,
                    const ::google::protobuf::Empty& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::GetMembersReply>>(
          AsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr<
        ::grpc::ClientAsyncResponseReaderInterface<::GetMembersReply>>
    PrepareAsyncGetMembers(::grpc::ClientContext* context,
                           const ::google::protobuf::Empty& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReaderInterface<::GetMembersReply>>(
          PrepareAsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientReaderInterface<::Event>> Subscribe(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request) {
      return std::unique_ptr<::grpc::ClientReaderInterface<::Event>>(
          SubscribeRaw(context, request));
    }
    std::unique_ptr<::grpc::ClientAsyncReaderInterface<::Event>> AsyncSubscribe(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request,
        ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr<::grpc::ClientAsyncReaderInterface<::Event>>(
          AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr<::grpc::ClientAsyncReaderInterface<::Event>>
    PrepareAsyncSubscribe(::grpc::ClientContext* context,
                          const ::SubscribeRequest& request,
                          ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncReaderInterface<::Event>>(
          PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetMembers(::grpc::ClientContext* context,
                              const ::google::protobuf::Empty* request,
                              ::GetMembersReply* response,
                              std::function<void(::grpc::Status)>) = 0;
      virtual void GetMembers(::grpc::ClientContext* context,
                              const ::grpc::ByteBuffer* request,
                              ::GetMembersReply* response,
                              std::function<void(::grpc::Status)>) = 0;
      virtual void GetMembers(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::GetMembersReply* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMembers(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::GetMembersReply* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Subscribe(
          ::grpc::ClientContext* context, ::SubscribeRequest* request,
          ::grpc::experimental::ClientReadReactor<::Event>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() {
      return nullptr;
    }

   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface<::GetMembersReply>*
    AsyncGetMembersRaw(::grpc::ClientContext* context,
                       const ::google::protobuf::Empty& request,
                       ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface<::GetMembersReply>*
    PrepareAsyncGetMembersRaw(::grpc::ClientContext* context,
                              const ::google::protobuf::Empty& request,
                              ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface<::Event>* SubscribeRaw(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface<::Event>* AsyncSubscribeRaw(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request,
        ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface<::Event>*
    PrepareAsyncSubscribeRaw(::grpc::ClientContext* context,
                             const ::SubscribeRequest& request,
                             ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel);
    ::grpc::Status GetMembers(::grpc::ClientContext* context,
                              const ::google::protobuf::Empty& request,
                              ::GetMembersReply* response) override;
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::GetMembersReply>>
    AsyncGetMembers(::grpc::ClientContext* context,
                    const ::google::protobuf::Empty& request,
                    ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::GetMembersReply>>(
          AsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientAsyncResponseReader<::GetMembersReply>>
    PrepareAsyncGetMembers(::grpc::ClientContext* context,
                           const ::google::protobuf::Empty& request,
                           ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<
          ::grpc::ClientAsyncResponseReader<::GetMembersReply>>(
          PrepareAsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr<::grpc::ClientReader<::Event>> Subscribe(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request) {
      return std::unique_ptr<::grpc::ClientReader<::Event>>(
          SubscribeRaw(context, request));
    }
    std::unique_ptr<::grpc::ClientAsyncReader<::Event>> AsyncSubscribe(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request,
        ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr<::grpc::ClientAsyncReader<::Event>>(
          AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr<::grpc::ClientAsyncReader<::Event>> PrepareAsyncSubscribe(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request,
        ::grpc::CompletionQueue* cq) {
      return std::unique_ptr<::grpc::ClientAsyncReader<::Event>>(
          PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class experimental_async final
        : public StubInterface::experimental_async_interface {
     public:
      void GetMembers(::grpc::ClientContext* context,
                      const ::google::protobuf::Empty* request,
                      ::GetMembersReply* response,
                      std::function<void(::grpc::Status)>) override;
      void GetMembers(::grpc::ClientContext* context,
                      const ::grpc::ByteBuffer* request,
                      ::GetMembersReply* response,
                      std::function<void(::grpc::Status)>) override;
      void GetMembers(
          ::grpc::ClientContext* context,
          const ::google::protobuf::Empty* request, ::GetMembersReply* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMembers(
          ::grpc::ClientContext* context, const ::grpc::ByteBuffer* request,
          ::GetMembersReply* response,
          ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Subscribe(
          ::grpc::ClientContext* context, ::SubscribeRequest* request,
          ::grpc::experimental::ClientReadReactor<::Event>* reactor) override;

     private:
      friend class Stub;
      explicit experimental_async(Stub* stub) : stub_(stub) {}
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override {
      return &async_stub_;
    }

   private:
    std::shared_ptr<::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_ {
      this
    };
    ::grpc::ClientAsyncResponseReader<::GetMembersReply>* AsyncGetMembersRaw(
        ::grpc::ClientContext* context,
        const ::google::protobuf::Empty& request,
        ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader<::GetMembersReply>*
    PrepareAsyncGetMembersRaw(::grpc::ClientContext* context,
                              const ::google::protobuf::Empty& request,
                              ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader<::Event>* SubscribeRaw(
        ::grpc::ClientContext* context,
        const ::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader<::Event>* AsyncSubscribeRaw(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request,
        ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader<::Event>* PrepareAsyncSubscribeRaw(
        ::grpc::ClientContext* context, const ::SubscribeRequest& request,
        ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMembers_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(
      const std::shared_ptr<::grpc::ChannelInterface>& channel,
      const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetMembers(::grpc::ServerContext* context,
                                      const ::google::protobuf::Empty* request,
                                      ::GetMembersReply* response);
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context,
                                     const ::SubscribeRequest* request,
                                     ::grpc::ServerWriter<::Event>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_GetMembers() { ::grpc::Service::MarkMethodAsync(0); }
    ~WithAsyncMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* /*context*/,
                              const ::google::protobuf::Empty* /*request*/,
                              ::GetMembersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMembers(
        ::grpc::ServerContext* context, ::google::protobuf::Empty* request,
        ::grpc::ServerAsyncResponseWriter<::GetMembersReply>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithAsyncMethod_Subscribe() { ::grpc::Service::MarkMethodAsync(1); }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(
        ::grpc::ServerContext* /*context*/,
        const ::SubscribeRequest* /*request*/,
        ::grpc::ServerWriter<::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context,
                          ::SubscribeRequest* request,
                          ::grpc::ServerAsyncWriter<::Event>* writer,
                          ::grpc::CompletionQueue* new_call_cq,
                          ::grpc::ServerCompletionQueue* notification_cq,
                          void* tag) {
      ::grpc::Service::RequestAsyncServerStreaming(
          1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMembers<WithAsyncMethod_Subscribe<Service>>
      AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithCallbackMethod_GetMembers() {
      ::grpc::Service::experimental().MarkMethodCallback(
          0, new ::grpc_impl::internal::CallbackUnaryHandler<
                 ::google::protobuf::Empty, ::GetMembersReply>(
                 [this](::grpc::ServerContext* context,
                        const ::google::protobuf::Empty* request,
                        ::GetMembersReply* response,
                        ::grpc::experimental::ServerCallbackRpcController*
                            controller) {
                   return this->GetMembers(context, request, response,
                                           controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMembers(
        ::grpc::experimental::MessageAllocator<::google::protobuf::Empty,
                                               ::GetMembersReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler<
          ::google::protobuf::Empty, ::GetMembersReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
          ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* /*context*/,
                              const ::google::protobuf::Empty* /*request*/,
                              ::GetMembersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMembers(
        ::grpc::ServerContext* /*context*/,
        const ::google::protobuf::Empty* /*request*/,
        ::GetMembersReply* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodCallback(
          1, new ::grpc_impl::internal::CallbackServerStreamingHandler<
                 ::SubscribeRequest, ::Event>(
                 [this] { return this->Subscribe(); }));
    }
    ~ExperimentalWithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(
        ::grpc::ServerContext* /*context*/,
        const ::SubscribeRequest* /*request*/,
        ::grpc::ServerWriter<::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor<::SubscribeRequest,
                                                     ::Event>*
    Subscribe() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
          ::SubscribeRequest, ::Event>;
    }
  };
  typedef ExperimentalWithCallbackMethod_GetMembers<
      ExperimentalWithCallbackMethod_Subscribe<Service>>
      ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_GetMembers() { ::grpc::Service::MarkMethodGeneric(0); }
    ~WithGenericMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* /*context*/,
                              const ::google::protobuf::Empty* /*request*/,
                              ::GetMembersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithGenericMethod_Subscribe() { ::grpc::Service::MarkMethodGeneric(1); }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(
        ::grpc::ServerContext* /*context*/,
        const ::SubscribeRequest* /*request*/,
        ::grpc::ServerWriter<::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_GetMembers() { ::grpc::Service::MarkMethodRaw(0); }
    ~WithRawMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* /*context*/,
                              const ::google::protobuf::Empty* /*request*/,
                              ::GetMembersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMembers(
        ::grpc::ServerContext* context, ::grpc::ByteBuffer* request,
        ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer>* response,
        ::grpc::CompletionQueue* new_call_cq,
        ::grpc::ServerCompletionQueue* notification_cq, void* tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response,
                                         new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithRawMethod_Subscribe() { ::grpc::Service::MarkMethodRaw(1); }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(
        ::grpc::ServerContext* /*context*/,
        const ::SubscribeRequest* /*request*/,
        ::grpc::ServerWriter<::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context,
                          ::grpc::ByteBuffer* request,
                          ::grpc::ServerAsyncWriter<::grpc::ByteBuffer>* writer,
                          ::grpc::CompletionQueue* new_call_cq,
                          ::grpc::ServerCompletionQueue* notification_cq,
                          void* tag) {
      ::grpc::Service::RequestAsyncServerStreaming(
          1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithRawCallbackMethod_GetMembers() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          0,
          new ::grpc_impl::internal::CallbackUnaryHandler<::grpc::ByteBuffer,
                                                          ::grpc::ByteBuffer>(
              [this](::grpc::ServerContext* context,
                     const ::grpc::ByteBuffer* request,
                     ::grpc::ByteBuffer* response,
                     ::grpc::experimental::ServerCallbackRpcController*
                         controller) {
                this->GetMembers(context, request, response, controller);
              }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* /*context*/,
                              const ::google::protobuf::Empty* /*request*/,
                              ::GetMembersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMembers(
        ::grpc::ServerContext* /*context*/,
        const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/,
        ::grpc::experimental::ServerCallbackRpcController* controller) {
      controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, ""));
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    ExperimentalWithRawCallbackMethod_Subscribe() {
      ::grpc::Service::experimental().MarkMethodRawCallback(
          1, new ::grpc_impl::internal::CallbackServerStreamingHandler<
                 ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                 [this] { return this->Subscribe(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(
        ::grpc::ServerContext* /*context*/,
        const ::SubscribeRequest* /*request*/,
        ::grpc::ServerWriter<::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor<::grpc::ByteBuffer,
                                                     ::grpc::ByteBuffer>*
    Subscribe() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
          ::grpc::ByteBuffer, ::grpc::ByteBuffer>;
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithStreamedUnaryMethod_GetMembers() {
      ::grpc::Service::MarkMethodStreamed(
          0,
          new ::grpc::internal::StreamedUnaryHandler<::google::protobuf::Empty,
                                                     ::GetMembersReply>(
              std::bind(&WithStreamedUnaryMethod_GetMembers<
                            BaseClass>::StreamedGetMembers,
                        this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* /*context*/,
                              const ::google::protobuf::Empty* /*request*/,
                              ::GetMembersReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMembers(
        ::grpc::ServerContext* context,
        ::grpc::ServerUnaryStreamer<::google::protobuf::Empty,
                                    ::GetMembersReply>*
            server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMembers<Service> StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}

   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(
          1,
          new ::grpc::internal::SplitServerStreamingHandler<::SubscribeRequest,
                                                            ::Event>(std::bind(
              &WithSplitStreamingMethod_Subscribe<BaseClass>::StreamedSubscribe,
              this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(
        ::grpc::ServerContext* /*context*/,
        const ::SubscribeRequest* /*request*/,
        ::grpc::ServerWriter<::Event>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(
        ::grpc::ServerContext* context,
        ::grpc::ServerSplitStreamer<::SubscribeRequest, ::Event>*
            server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service> SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMembers<
      WithSplitStreamingMethod_Subscribe<Service>>
      StreamedService;
};

#endif  // GRPC_node_5fkeeper_2eproto__INCLUDED
