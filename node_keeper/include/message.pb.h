// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <google/protobuf/port_def.inc>
#include <limits>
#include <string>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>

#include <google/protobuf/port_undef.inc>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
      schema[2] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
      field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace membership {
class MemberFullState;
class MemberFullStateDefaultTypeInternal;
extern MemberFullStateDefaultTypeInternal _MemberFullState_default_instance_;
class MemberUpdate;
class MemberUpdateDefaultTypeInternal;
extern MemberUpdateDefaultTypeInternal _MemberUpdate_default_instance_;
}  // namespace membership
PROTOBUF_NAMESPACE_OPEN
template <>
::membership::MemberFullState*
Arena::CreateMaybeMessage<::membership::MemberFullState>(Arena*);
template <>
::membership::MemberUpdate*
Arena::CreateMaybeMessage<::membership::MemberUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace membership {

enum MemberUpdate_MemberStatus : int {
  MemberUpdate_MemberStatus_UP = 0,
  MemberUpdate_MemberStatus_DOWN = 1
};
bool MemberUpdate_MemberStatus_IsValid(int value);
constexpr MemberUpdate_MemberStatus MemberUpdate_MemberStatus_MemberStatus_MIN =
    MemberUpdate_MemberStatus_UP;
constexpr MemberUpdate_MemberStatus MemberUpdate_MemberStatus_MemberStatus_MAX =
    MemberUpdate_MemberStatus_DOWN;
constexpr int MemberUpdate_MemberStatus_MemberStatus_ARRAYSIZE =
    MemberUpdate_MemberStatus_MemberStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MemberUpdate_MemberStatus_descriptor();
template <typename T>
inline const std::string& MemberUpdate_MemberStatus_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, MemberUpdate_MemberStatus>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function MemberUpdate_MemberStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      MemberUpdate_MemberStatus_descriptor(), enum_t_value);
}
inline bool MemberUpdate_MemberStatus_Parse(const std::string& name,
                                            MemberUpdate_MemberStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      MemberUpdate_MemberStatus>(MemberUpdate_MemberStatus_descriptor(), name,
                                 value);
}
// ===================================================================

class MemberUpdate : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:membership.MemberUpdate)
                                                              */
{
 public:
  MemberUpdate();
  virtual ~MemberUpdate();

  MemberUpdate(const MemberUpdate& from);
  MemberUpdate(MemberUpdate&& from) noexcept : MemberUpdate() {
    *this = ::std::move(from);
  }

  inline MemberUpdate& operator=(const MemberUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberUpdate& operator=(MemberUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields()
      const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberUpdate* internal_default_instance() {
    return reinterpret_cast<const MemberUpdate*>(
        &_MemberUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(MemberUpdate& a, MemberUpdate& b) { a.Swap(&b); }
  inline void Swap(MemberUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberUpdate* New() const final {
    return CreateMaybeMessage<MemberUpdate>(nullptr);
  }

  MemberUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberUpdate& from);
  void MergeFrom(const MemberUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "membership.MemberUpdate";
  }

 private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const { return nullptr; }

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef MemberUpdate_MemberStatus MemberStatus;
  static constexpr MemberStatus UP = MemberUpdate_MemberStatus_UP;
  static constexpr MemberStatus DOWN = MemberUpdate_MemberStatus_DOWN;
  static inline bool MemberStatus_IsValid(int value) {
    return MemberUpdate_MemberStatus_IsValid(value);
  }
  static constexpr MemberStatus MemberStatus_MIN =
      MemberUpdate_MemberStatus_MemberStatus_MIN;
  static constexpr MemberStatus MemberStatus_MAX =
      MemberUpdate_MemberStatus_MemberStatus_MAX;
  static constexpr int MemberStatus_ARRAYSIZE =
      MemberUpdate_MemberStatus_MemberStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MemberStatus_descriptor() {
    return MemberUpdate_MemberStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& MemberStatus_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, MemberStatus>::value || ::std::is_integral<T>::value,
        "Incorrect type passed to function MemberStatus_Name.");
    return MemberUpdate_MemberStatus_Name(enum_t_value);
  }
  static inline bool MemberStatus_Parse(const std::string& name,
                                        MemberStatus* value) {
    return MemberUpdate_MemberStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
    kStatusFieldNumber = 4,
    kIncarnationFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string ip = 2;
  bool has_ip() const;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // required int32 port = 3;
  bool has_port() const;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required .membership.MemberUpdate.MemberStatus status = 4;
  bool has_status() const;
  void clear_status();
  ::membership::MemberUpdate_MemberStatus status() const;
  void set_status(::membership::MemberUpdate_MemberStatus value);

  // required int32 incarnation = 5;
  bool has_incarnation() const;
  void clear_incarnation();
  ::PROTOBUF_NAMESPACE_ID::int32 incarnation() const;
  void set_incarnation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:membership.MemberUpdate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 incarnation_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MemberFullState : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:membership.MemberFullState)
                                                                 */
{
 public:
  MemberFullState();
  virtual ~MemberFullState();

  MemberFullState(const MemberFullState& from);
  MemberFullState(MemberFullState&& from) noexcept : MemberFullState() {
    *this = ::std::move(from);
  }

  inline MemberFullState& operator=(const MemberFullState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberFullState& operator=(MemberFullState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields()
      const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberFullState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberFullState* internal_default_instance() {
    return reinterpret_cast<const MemberFullState*>(
        &_MemberFullState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(MemberFullState& a, MemberFullState& b) { a.Swap(&b); }
  inline void Swap(MemberFullState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberFullState* New() const final {
    return CreateMaybeMessage<MemberFullState>(nullptr);
  }

  MemberFullState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberFullState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberFullState& from);
  void MergeFrom(const MemberFullState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberFullState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "membership.MemberFullState";
  }

 private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const { return nullptr; }

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .membership.MemberUpdate states = 1;
  int states_size() const;
  void clear_states();
  ::membership::MemberUpdate* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::membership::MemberUpdate>*
  mutable_states();
  const ::membership::MemberUpdate& states(int index) const;
  ::membership::MemberUpdate* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::membership::MemberUpdate>&
  states() const;

  // @@protoc_insertion_point(class_scope:membership.MemberFullState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::membership::MemberUpdate> states_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemberUpdate

// required string name = 1;
inline bool MemberUpdate::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberUpdate::clear_name() {
  name_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemberUpdate::name() const {
  // @@protoc_insertion_point(field_get:membership.MemberUpdate.name)
  return name_.GetNoArena();
}
inline void MemberUpdate::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:membership.MemberUpdate.name)
}
inline void MemberUpdate::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:membership.MemberUpdate.name)
}
inline void MemberUpdate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:membership.MemberUpdate.name)
}
inline void MemberUpdate::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:membership.MemberUpdate.name)
}
inline std::string* MemberUpdate::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:membership.MemberUpdate.name)
  return name_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberUpdate::release_name() {
  // @@protoc_insertion_point(field_release:membership.MemberUpdate.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberUpdate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:membership.MemberUpdate.name)
}

// required string ip = 2;
inline bool MemberUpdate::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberUpdate::clear_ip() {
  ip_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MemberUpdate::ip() const {
  // @@protoc_insertion_point(field_get:membership.MemberUpdate.ip)
  return ip_.GetNoArena();
}
inline void MemberUpdate::set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:membership.MemberUpdate.ip)
}
inline void MemberUpdate::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:membership.MemberUpdate.ip)
}
inline void MemberUpdate::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:membership.MemberUpdate.ip)
}
inline void MemberUpdate::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:membership.MemberUpdate.ip)
}
inline std::string* MemberUpdate::mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:membership.MemberUpdate.ip)
  return ip_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberUpdate::release_ip() {
  // @@protoc_insertion_point(field_release:membership.MemberUpdate.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefaultNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberUpdate::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:membership.MemberUpdate.ip)
}

// required int32 port = 3;
inline bool MemberUpdate::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberUpdate::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemberUpdate::port() const {
  // @@protoc_insertion_point(field_get:membership.MemberUpdate.port)
  return port_;
}
inline void MemberUpdate::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
  // @@protoc_insertion_point(field_set:membership.MemberUpdate.port)
}

// required .membership.MemberUpdate.MemberStatus status = 4;
inline bool MemberUpdate::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemberUpdate::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::membership::MemberUpdate_MemberStatus MemberUpdate::status() const {
  // @@protoc_insertion_point(field_get:membership.MemberUpdate.status)
  return static_cast<::membership::MemberUpdate_MemberStatus>(status_);
}
inline void MemberUpdate::set_status(
    ::membership::MemberUpdate_MemberStatus value) {
  assert(::membership::MemberUpdate_MemberStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
  // @@protoc_insertion_point(field_set:membership.MemberUpdate.status)
}

// required int32 incarnation = 5;
inline bool MemberUpdate::has_incarnation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemberUpdate::clear_incarnation() {
  incarnation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemberUpdate::incarnation() const {
  // @@protoc_insertion_point(field_get:membership.MemberUpdate.incarnation)
  return incarnation_;
}
inline void MemberUpdate::set_incarnation(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  incarnation_ = value;
  // @@protoc_insertion_point(field_set:membership.MemberUpdate.incarnation)
}

// -------------------------------------------------------------------

// MemberFullState

// repeated .membership.MemberUpdate states = 1;
inline int MemberFullState::states_size() const { return states_.size(); }
inline void MemberFullState::clear_states() { states_.Clear(); }
inline ::membership::MemberUpdate* MemberFullState::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:membership.MemberFullState.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::membership::MemberUpdate>*
MemberFullState::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:membership.MemberFullState.states)
  return &states_;
}
inline const ::membership::MemberUpdate& MemberFullState::states(
    int index) const {
  // @@protoc_insertion_point(field_get:membership.MemberFullState.states)
  return states_.Get(index);
}
inline ::membership::MemberUpdate* MemberFullState::add_states() {
  // @@protoc_insertion_point(field_add:membership.MemberFullState.states)
  return states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::membership::MemberUpdate>&
MemberFullState::states() const {
  // @@protoc_insertion_point(field_list:membership.MemberFullState.states)
  return states_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace membership

PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::membership::MemberUpdate_MemberStatus>
    : ::std::true_type {};
template <>
inline const EnumDescriptor*
GetEnumDescriptor<::membership::MemberUpdate_MemberStatus>() {
  return ::membership::MemberUpdate_MemberStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
