// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_monitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_5fmonitor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_5fmonitor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>

#include <google/protobuf/port_undef.inc>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_5fmonitor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5fmonitor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
      schema[4] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
      field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_node_5fmonitor_2eproto;
class ActorInfo;
class ActorInfoDefaultTypeInternal;
extern ActorInfoDefaultTypeInternal _ActorInfo_default_instance_;
class ActorStatus;
class ActorStatusDefaultTypeInternal;
extern ActorStatusDefaultTypeInternal _ActorStatus_default_instance_;
class AllNodeStatus;
class AllNodeStatusDefaultTypeInternal;
extern AllNodeStatusDefaultTypeInternal _AllNodeStatus_default_instance_;
class NodeStatus;
class NodeStatusDefaultTypeInternal;
extern NodeStatusDefaultTypeInternal _NodeStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::ActorInfo* Arena::CreateMaybeMessage<::ActorInfo>(Arena*);
template <>
::ActorStatus* Arena::CreateMaybeMessage<::ActorStatus>(Arena*);
template <>
::AllNodeStatus* Arena::CreateMaybeMessage<::AllNodeStatus>(Arena*);
template <>
::NodeStatus* Arena::CreateMaybeMessage<::NodeStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NodeStatus
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:NodeStatus) */ {
 public:
  NodeStatus();
  virtual ~NodeStatus();

  NodeStatus(const NodeStatus& from);
  NodeStatus(NodeStatus&& from) noexcept : NodeStatus() {
    *this = ::std::move(from);
  }

  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStatus& operator=(NodeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeStatus* internal_default_instance() {
    return reinterpret_cast<const NodeStatus*>(&_NodeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(NodeStatus& a, NodeStatus& b) { a.Swap(&b); }
  inline void Swap(NodeStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeStatus* New() const final {
    return CreateMaybeMessage<NodeStatus>(nullptr);
  }

  NodeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeStatus& from);
  void MergeFrom(const NodeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeStatus";
  }

 private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const { return nullptr; }

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_node_5fmonitor_2eproto);
    return ::descriptor_table_node_5fmonitor_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 5,
    kErrorMessageFieldNumber = 6,
    kCpuUseRateFieldNumber = 1,
    kMemUseRateFieldNumber = 2,
    kMaxMemoryFieldNumber = 3,
    kUseMemoryFieldNumber = 4,
  };
  // string ip = 5;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string error_message = 6;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // double cpu_use_rate = 1;
  void clear_cpu_use_rate();
  double cpu_use_rate() const;
  void set_cpu_use_rate(double value);

  // double mem_use_rate = 2;
  void clear_mem_use_rate();
  double mem_use_rate() const;
  void set_mem_use_rate(double value);

  // uint64 max_memory = 3;
  void clear_max_memory();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_memory() const;
  void set_max_memory(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 use_memory = 4;
  void clear_use_memory();
  ::PROTOBUF_NAMESPACE_ID::uint64 use_memory() const;
  void set_use_memory(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:NodeStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  double cpu_use_rate_;
  double mem_use_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_memory_;
  ::PROTOBUF_NAMESPACE_ID::uint64 use_memory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmonitor_2eproto;
};
// -------------------------------------------------------------------

class AllNodeStatus : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AllNodeStatus)
                                                               */
{
 public:
  AllNodeStatus();
  virtual ~AllNodeStatus();

  AllNodeStatus(const AllNodeStatus& from);
  AllNodeStatus(AllNodeStatus&& from) noexcept : AllNodeStatus() {
    *this = ::std::move(from);
  }

  inline AllNodeStatus& operator=(const AllNodeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllNodeStatus& operator=(AllNodeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllNodeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllNodeStatus* internal_default_instance() {
    return reinterpret_cast<const AllNodeStatus*>(
        &_AllNodeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(AllNodeStatus& a, AllNodeStatus& b) { a.Swap(&b); }
  inline void Swap(AllNodeStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllNodeStatus* New() const final {
    return CreateMaybeMessage<AllNodeStatus>(nullptr);
  }

  AllNodeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllNodeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllNodeStatus& from);
  void MergeFrom(const AllNodeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllNodeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AllNodeStatus";
  }

 private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const { return nullptr; }

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_node_5fmonitor_2eproto);
    return ::descriptor_table_node_5fmonitor_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeStatusFieldNumber = 1,
  };
  // repeated .NodeStatus node_status = 1;
  int node_status_size() const;
  void clear_node_status();
  ::NodeStatus* mutable_node_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::NodeStatus>*
  mutable_node_status();
  const ::NodeStatus& node_status(int index) const;
  ::NodeStatus* add_node_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::NodeStatus>& node_status()
      const;

  // @@protoc_insertion_point(class_scope:AllNodeStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::NodeStatus> node_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmonitor_2eproto;
};
// -------------------------------------------------------------------

class ActorInfo
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ActorInfo) */ {
 public:
  ActorInfo();
  virtual ~ActorInfo();

  ActorInfo(const ActorInfo& from);
  ActorInfo(ActorInfo&& from) noexcept : ActorInfo() {
    *this = ::std::move(from);
  }

  inline ActorInfo& operator=(const ActorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorInfo& operator=(ActorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActorInfo* internal_default_instance() {
    return reinterpret_cast<const ActorInfo*>(&_ActorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(ActorInfo& a, ActorInfo& b) { a.Swap(&b); }
  inline void Swap(ActorInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorInfo* New() const final {
    return CreateMaybeMessage<ActorInfo>(nullptr);
  }

  ActorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorInfo& from);
  void MergeFrom(const ActorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActorInfo";
  }

 private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const { return nullptr; }

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_node_5fmonitor_2eproto);
    return ::descriptor_table_node_5fmonitor_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // @@protoc_insertion_point(class_scope:ActorInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmonitor_2eproto;
};
// -------------------------------------------------------------------

class ActorStatus
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ActorStatus) */ {
 public:
  ActorStatus();
  virtual ~ActorStatus();

  ActorStatus(const ActorStatus& from);
  ActorStatus(ActorStatus&& from) noexcept : ActorStatus() {
    *this = ::std::move(from);
  }

  inline ActorStatus& operator=(const ActorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorStatus& operator=(ActorStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActorStatus* internal_default_instance() {
    return reinterpret_cast<const ActorStatus*>(
        &_ActorStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(ActorStatus& a, ActorStatus& b) { a.Swap(&b); }
  inline void Swap(ActorStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorStatus* New() const final {
    return CreateMaybeMessage<ActorStatus>(nullptr);
  }

  ActorStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorStatus& from);
  void MergeFrom(const ActorStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActorStatus";
  }

 private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const { return nullptr; }

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_node_5fmonitor_2eproto);
    return ::descriptor_table_node_5fmonitor_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorInfosFieldNumber = 1,
    kIpFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kActorWorkerFieldNumber = 2,
  };
  // repeated .ActorInfo actor_infos = 1;
  int actor_infos_size() const;
  void clear_actor_infos();
  ::ActorInfo* mutable_actor_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ActorInfo>* mutable_actor_infos();
  const ::ActorInfo& actor_infos(int index) const;
  ::ActorInfo* add_actor_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ActorInfo>& actor_infos()
      const;

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // int32 actor_worker = 2;
  void clear_actor_worker();
  ::PROTOBUF_NAMESPACE_ID::int32 actor_worker() const;
  void set_actor_worker(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ActorStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ActorInfo> actor_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 actor_worker_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5fmonitor_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeStatus

// double cpu_use_rate = 1;
inline void NodeStatus::clear_cpu_use_rate() { cpu_use_rate_ = 0; }
inline double NodeStatus::cpu_use_rate() const {
  // @@protoc_insertion_point(field_get:NodeStatus.cpu_use_rate)
  return cpu_use_rate_;
}
inline void NodeStatus::set_cpu_use_rate(double value) {
  cpu_use_rate_ = value;
  // @@protoc_insertion_point(field_set:NodeStatus.cpu_use_rate)
}

// double mem_use_rate = 2;
inline void NodeStatus::clear_mem_use_rate() { mem_use_rate_ = 0; }
inline double NodeStatus::mem_use_rate() const {
  // @@protoc_insertion_point(field_get:NodeStatus.mem_use_rate)
  return mem_use_rate_;
}
inline void NodeStatus::set_mem_use_rate(double value) {
  mem_use_rate_ = value;
  // @@protoc_insertion_point(field_set:NodeStatus.mem_use_rate)
}

// uint64 max_memory = 3;
inline void NodeStatus::clear_max_memory() {
  max_memory_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStatus::max_memory() const {
  // @@protoc_insertion_point(field_get:NodeStatus.max_memory)
  return max_memory_;
}
inline void NodeStatus::set_max_memory(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  max_memory_ = value;
  // @@protoc_insertion_point(field_set:NodeStatus.max_memory)
}

// uint64 use_memory = 4;
inline void NodeStatus::clear_use_memory() {
  use_memory_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStatus::use_memory() const {
  // @@protoc_insertion_point(field_get:NodeStatus.use_memory)
  return use_memory_;
}
inline void NodeStatus::set_use_memory(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  use_memory_ = value;
  // @@protoc_insertion_point(field_set:NodeStatus.use_memory)
}

// string ip = 5;
inline void NodeStatus::clear_ip() {
  ip_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeStatus::ip() const {
  // @@protoc_insertion_point(field_get:NodeStatus.ip)
  return ip_.GetNoArena();
}
inline void NodeStatus::set_ip(const std::string& value) {
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeStatus.ip)
}
inline void NodeStatus::set_ip(std::string&& value) {
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeStatus.ip)
}
inline void NodeStatus::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeStatus.ip)
}
inline void NodeStatus::set_ip(const char* value, size_t size) {
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeStatus.ip)
}
inline std::string* NodeStatus::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:NodeStatus.ip)
  return ip_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeStatus::release_ip() {
  // @@protoc_insertion_point(field_release:NodeStatus.ip)

  return ip_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeStatus::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
  } else {
  }
  ip_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NodeStatus.ip)
}

// string error_message = 6;
inline void NodeStatus::clear_error_message() {
  error_message_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeStatus::error_message() const {
  // @@protoc_insertion_point(field_get:NodeStatus.error_message)
  return error_message_.GetNoArena();
}
inline void NodeStatus::set_error_message(const std::string& value) {
  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeStatus.error_message)
}
inline void NodeStatus::set_error_message(std::string&& value) {
  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeStatus.error_message)
}
inline void NodeStatus::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeStatus.error_message)
}
inline void NodeStatus::set_error_message(const char* value, size_t size) {
  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeStatus.error_message)
}
inline std::string* NodeStatus::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:NodeStatus.error_message)
  return error_message_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeStatus::release_error_message() {
  // @@protoc_insertion_point(field_release:NodeStatus.error_message)

  return error_message_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeStatus::set_allocated_error_message(
    std::string* error_message) {
  if (error_message != nullptr) {
  } else {
  }
  error_message_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_message);
  // @@protoc_insertion_point(field_set_allocated:NodeStatus.error_message)
}

// -------------------------------------------------------------------

// AllNodeStatus

// repeated .NodeStatus node_status = 1;
inline int AllNodeStatus::node_status_size() const {
  return node_status_.size();
}
inline void AllNodeStatus::clear_node_status() { node_status_.Clear(); }
inline ::NodeStatus* AllNodeStatus::mutable_node_status(int index) {
  // @@protoc_insertion_point(field_mutable:AllNodeStatus.node_status)
  return node_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::NodeStatus>*
AllNodeStatus::mutable_node_status() {
  // @@protoc_insertion_point(field_mutable_list:AllNodeStatus.node_status)
  return &node_status_;
}
inline const ::NodeStatus& AllNodeStatus::node_status(int index) const {
  // @@protoc_insertion_point(field_get:AllNodeStatus.node_status)
  return node_status_.Get(index);
}
inline ::NodeStatus* AllNodeStatus::add_node_status() {
  // @@protoc_insertion_point(field_add:AllNodeStatus.node_status)
  return node_status_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::NodeStatus>&
AllNodeStatus::node_status() const {
  // @@protoc_insertion_point(field_list:AllNodeStatus.node_status)
  return node_status_;
}

// -------------------------------------------------------------------

// ActorInfo

// string name = 1;
inline void ActorInfo::clear_name() {
  name_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActorInfo::name() const {
  // @@protoc_insertion_point(field_get:ActorInfo.name)
  return name_.GetNoArena();
}
inline void ActorInfo::set_name(const std::string& value) {
  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActorInfo.name)
}
inline void ActorInfo::set_name(std::string&& value) {
  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActorInfo.name)
}
inline void ActorInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActorInfo.name)
}
inline void ActorInfo::set_name(const char* value, size_t size) {
  name_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActorInfo.name)
}
inline std::string* ActorInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ActorInfo.name)
  return name_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActorInfo::release_name() {
  // @@protoc_insertion_point(field_release:ActorInfo.name)

  return name_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActorInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
  } else {
  }
  name_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ActorInfo.name)
}

// string description = 2;
inline void ActorInfo::clear_description() {
  description_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActorInfo::description() const {
  // @@protoc_insertion_point(field_get:ActorInfo.description)
  return description_.GetNoArena();
}
inline void ActorInfo::set_description(const std::string& value) {
  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActorInfo.description)
}
inline void ActorInfo::set_description(std::string&& value) {
  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActorInfo.description)
}
inline void ActorInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActorInfo.description)
}
inline void ActorInfo::set_description(const char* value, size_t size) {
  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActorInfo.description)
}
inline std::string* ActorInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ActorInfo.description)
  return description_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActorInfo::release_description() {
  // @@protoc_insertion_point(field_release:ActorInfo.description)

  return description_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActorInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
  } else {
  }
  description_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description);
  // @@protoc_insertion_point(field_set_allocated:ActorInfo.description)
}

// -------------------------------------------------------------------

// ActorStatus

// repeated .ActorInfo actor_infos = 1;
inline int ActorStatus::actor_infos_size() const { return actor_infos_.size(); }
inline void ActorStatus::clear_actor_infos() { actor_infos_.Clear(); }
inline ::ActorInfo* ActorStatus::mutable_actor_infos(int index) {
  // @@protoc_insertion_point(field_mutable:ActorStatus.actor_infos)
  return actor_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ActorInfo>*
ActorStatus::mutable_actor_infos() {
  // @@protoc_insertion_point(field_mutable_list:ActorStatus.actor_infos)
  return &actor_infos_;
}
inline const ::ActorInfo& ActorStatus::actor_infos(int index) const {
  // @@protoc_insertion_point(field_get:ActorStatus.actor_infos)
  return actor_infos_.Get(index);
}
inline ::ActorInfo* ActorStatus::add_actor_infos() {
  // @@protoc_insertion_point(field_add:ActorStatus.actor_infos)
  return actor_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ActorInfo>&
ActorStatus::actor_infos() const {
  // @@protoc_insertion_point(field_list:ActorStatus.actor_infos)
  return actor_infos_;
}

// int32 actor_worker = 2;
inline void ActorStatus::clear_actor_worker() { actor_worker_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ActorStatus::actor_worker() const {
  // @@protoc_insertion_point(field_get:ActorStatus.actor_worker)
  return actor_worker_;
}
inline void ActorStatus::set_actor_worker(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  actor_worker_ = value;
  // @@protoc_insertion_point(field_set:ActorStatus.actor_worker)
}

// string ip = 3;
inline void ActorStatus::clear_ip() {
  ip_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActorStatus::ip() const {
  // @@protoc_insertion_point(field_get:ActorStatus.ip)
  return ip_.GetNoArena();
}
inline void ActorStatus::set_ip(const std::string& value) {
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActorStatus.ip)
}
inline void ActorStatus::set_ip(std::string&& value) {
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActorStatus.ip)
}
inline void ActorStatus::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActorStatus.ip)
}
inline void ActorStatus::set_ip(const char* value, size_t size) {
  ip_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActorStatus.ip)
}
inline std::string* ActorStatus::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:ActorStatus.ip)
  return ip_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActorStatus::release_ip() {
  // @@protoc_insertion_point(field_release:ActorStatus.ip)

  return ip_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActorStatus::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
  } else {
  }
  ip_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ActorStatus.ip)
}

// string error_message = 4;
inline void ActorStatus::clear_error_message() {
  error_message_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActorStatus::error_message() const {
  // @@protoc_insertion_point(field_get:ActorStatus.error_message)
  return error_message_.GetNoArena();
}
inline void ActorStatus::set_error_message(const std::string& value) {
  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ActorStatus.error_message)
}
inline void ActorStatus::set_error_message(std::string&& value) {
  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActorStatus.error_message)
}
inline void ActorStatus::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActorStatus.error_message)
}
inline void ActorStatus::set_error_message(const char* value, size_t size) {
  error_message_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActorStatus.error_message)
}
inline std::string* ActorStatus::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:ActorStatus.error_message)
  return error_message_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActorStatus::release_error_message() {
  // @@protoc_insertion_point(field_release:ActorStatus.error_message)

  return error_message_.ReleaseNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActorStatus::set_allocated_error_message(
    std::string* error_message) {
  if (error_message != nullptr) {
  } else {
  }
  error_message_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_message);
  // @@protoc_insertion_point(field_set_allocated:ActorStatus.error_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_5fmonitor_2eproto
